# If this error pops out 
#     Error: pg_config executable not found
#
# simply install : $ sudo apt-get install libpq-dev python-dev

[buildout]
parts = 
    postgresql
    postgis
#    gdal
    pg_start
    pg_stop
    launch_pgsql
    symlinks_pgsql

eggs =
    psycopg2

[postgresql]
recipe = zc.recipe.cmmi
url = http://ftp.postgresql.org/pub/source/v8.4.11/postgresql-8.4.11.tar.gz
extra_options =
    --without-readline
    --enable-thread-safety

[postgis]
recipe = hexagonit.recipe.cmmi
url = http://postgis.refractions.net/download/postgis-1.5.2.tar.gz
configure-options =
    --with-pgconfig=${postgresql:location}/bin/pg_config
    --with-geosconfig=${geos:location}/bin/geos-config
    --with-projdir=${proj:location}

[proj]
recipe = zc.recipe.cmmi
url =  http://download.osgeo.org/proj/proj-4.8.0.tar.gz

[geos]
recipe = zc.recipe.cmmi
url = http://download.osgeo.org/geos/geos-3.3.2.tar.bz2

#[gdal]
#recipe = zc.recipe.cmmi
#url = http://download.osgeo.org/gdal/gdal-1.8.1.tar.gz
#extra_options = 
#    --with-python
#    --with-pg=${postgresql:location}/bin/pg_config
#    --with-geos=${geos:location}/bin/geos-config

[pg_start]
recipe = buildout_script
template = script.sh.in
target = pg_start
cmds = ${postgresql:location}/bin/pg_ctl -D ${postgresql:location}/var/data start -w

[pg_stop]
recipe = buildout_script
template = script.sh.in
target = pg_stop
cmds = ${postgresql:location}/bin/pg_ctl -D ${postgresql:location}/var/data stop -w

[launch_pgsql]
recipe = iw.recipe.cmd
on_install = true
on_update = false
cmds = 
    ps -C postgres 1> /dev/null
    if [ $? != 0 ] # if no process postgres is found, if postgres is down
    then
        echo "postgres is down, start postgres"
        ${postgresql:location}/bin/initdb -D ${postgresql:location}/var/data -E UNICODE
        ${buildout:directory}/bin/pg_start

        echo "check postgis installation"
        ${postgresql:location}/bin/psql -l |grep -q template_postgis 1> /dev/null
        if [ $? -ne 0 ]
        then
            ${postgresql:location}/bin/createdb -E UTF8 template_postgis
            ${postgresql:location}/bin/createlang -d template_postgis plpgsql
            ${postgresql:location}/bin/psql -d template_postgis -f ${postgresql:location}/share/contrib/postgis-1.5/postgis.sql
            ${postgresql:location}/bin/psql -d template_postgis -f ${postgresql:location}/share/contrib/postgis-1.5/spatial_ref_sys.sql
            ${postgresql:location}/bin/psql -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
            ${postgresql:location}/bin/psql -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"
        else
            echo "postgis is already installed"
        fi
    else
        echo "postgres is already running"
    fi



[symlinks_pgsql]
recipe = cns.recipe.symlink
symlink_target = ${buildout:directory}/bin
symlink_base = ${postgresql:location}/bin
symlink =
    clusterdb
    createdb
    createlang
    createuser
    dropdb
    droplang
    dropuser
    ecpg
    initdb
    pg_config
    pg_controldata
    pg_ctl
    pg_dump
    pg_dumpall
    pg_resetxlog
    pg_restore
    postgres
    postmaster
    psql
    reindexdb
    vacuumdb
    
[sources]
django_fixmystreet = git git@github.com:CIRB/django-fixmystreet.git 

[omelette]
recipe = collective.recipe.omelette 
eggs = ${buildout:eggs}

