# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import apps.fixmystreet.models
import django.contrib.gis.db.models.fields
import django_extensions.db.fields
import django.db.models.deletion
import ckeditor.fields
from stdimage import StdImageField
import apps.fixmystreet.utils
import django.utils.timezone
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('fmsproxy', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FaqEntry',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('q_fr', models.CharField(max_length=200, verbose_name='Question')),
                ('q_nl', models.CharField(max_length=200, null=True, verbose_name='Question', blank=True)),
                ('a_fr', models.TextField(null=True, verbose_name='Answere', blank=True)),
                ('a_nl', models.TextField(null=True, verbose_name='Answere', blank=True)),
                ('slug', models.SlugField(null=True, blank=True)),
                ('order', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['order'],
                'verbose_name_plural': 'faq entries',
            },
        ),
        migrations.CreateModel(
            name='FMSUser',
            fields=[
                ('user_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('telephone', models.CharField(max_length=20, null=True)),
                ('last_used_language', models.CharField(default=b'FR', max_length=10, null=True)),
                ('quality', models.IntegerField(blank=True, null=True, choices=[(1, 'Resident'), (2, 'Trade'), (3, 'Syndicate'), (4, 'Association'), (5, 'Other')])),
                ('agent', models.BooleanField(default=False)),
                ('manager', models.BooleanField(default=False)),
                ('leader', models.BooleanField(default=False)),
                ('applicant', models.BooleanField(default=False)),
                ('contractor', models.BooleanField(default=False)),
                ('logical_deleted', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.ForeignKey(related_name='fmsuser_created', editable=False, to='fixmystreet.FMSUser', null=True)),
                ('modified_by', models.ForeignKey(related_name='fmsuser_modified', editable=False, to='fixmystreet.FMSUser', null=True)),
            ],
            options={
                'ordering': ['last_name'],
            },
            bases=('auth.user',),
        ),
        migrations.CreateModel(
            name='GroupMailConfig',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notify_group', models.BooleanField(default=True, verbose_name='Notify group')),
                ('notify_members', models.BooleanField(default=False, verbose_name='Notify members')),
                ('digest_created', models.BooleanField(default=False, verbose_name='Digest created')),
                ('digest_inprogress', models.BooleanField(default=False, verbose_name='Digest in progress')),
                ('digest_closed', models.BooleanField(default=False, verbose_name='Digest closed')),
                ('digest_other', models.BooleanField(default=False, verbose_name='Digest other')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalFMSUser',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('password', models.CharField(default=b'!', max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(null=True, verbose_name='last login', blank=True)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=75, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', verbose_name='username', db_index=True)),
                ('first_name', models.CharField(max_length=30, verbose_name='first name', blank=True)),
                ('last_name', models.CharField(max_length=30, verbose_name='last name', blank=True)),
                ('email', models.EmailField(db_index=True, max_length=75, null=True, verbose_name='email address', blank=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telephone', models.CharField(max_length=20, null=True)),
                ('last_used_language', models.CharField(default=b'FR', max_length=10, null=True)),
                ('quality', models.IntegerField(blank=True, null=True, choices=[(1, 'Resident'), (2, 'Trade'), (3, 'Syndicate'), (4, 'Association'), (5, 'Other')])),
                ('agent', models.BooleanField(default=False)),
                ('manager', models.BooleanField(default=False)),
                ('leader', models.BooleanField(default=False)),
                ('applicant', models.BooleanField(default=False)),
                ('contractor', models.BooleanField(default=False)),
                ('logical_deleted', models.BooleanField(default=False)),
                ('created', models.DateTimeField(null=True, editable=False, blank=True)),
                ('modified', models.DateTimeField(null=True, editable=False, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.FMSUser', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.FMSUser', null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical fms user',
            },
        ),
        migrations.CreateModel(
            name='HistoricalOrganisationEntity',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('name_fr', models.CharField(max_length=100, verbose_name='Name')),
                ('name_nl', models.CharField(max_length=100, null=True, verbose_name='Name', blank=True)),
                ('slug_nl', models.SlugField(max_length=100, null=True, verbose_name='Slug', blank=True)),
                ('slug_fr', models.SlugField(max_length=100, verbose_name='Slug')),
                ('phone', models.CharField(max_length=32)),
                ('email', models.EmailField(max_length=254, null=True, blank=True)),
                ('active', models.BooleanField(default=False)),
                ('type', models.CharField(default=b'', max_length=1, choices=[(b'R', 'Region'), (b'C', 'Commune'), (b'S', 'Subcontractor'), (b'A', 'Applicant'), (b'D', 'Department'), (b'N', 'Neighbour house')])),
                ('feature_id', models.CharField(max_length=25, null=True, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.FMSUser', null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical organisation entity',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPage',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('title_nl', models.CharField(max_length=100, null=True, verbose_name=b'Title', blank=True)),
                ('title_fr', models.CharField(max_length=100, verbose_name=b'Title')),
                ('slug_nl', models.CharField(max_length=100, null=True, verbose_name=b'Slug', blank=True)),
                ('slug_fr', models.CharField(max_length=100, verbose_name=b'Slug')),
                ('content_fr', ckeditor.fields.RichTextField(verbose_name=b'Content')),
                ('content_nl', ckeditor.fields.RichTextField(null=True, verbose_name=b'Content', blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical page',
            },
        ),
        migrations.CreateModel(
            name='HistoricalReport',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('status', models.IntegerField(default=1, choices=[('Created', ((1, 'Created'), (9, 'Refused'), (11, 'Temp'))), ('In progress', ((2, 'In progress'), (4, 'Manager is assigned'), (5, 'Applicant is responsible'), (6, 'Contractor is assigned'), (7, 'Solved'))), ('Processed', ((3, 'Processed'), (8, 'Deleted')))])),
                ('quality', models.IntegerField(blank=True, null=True, choices=[(1, 'Resident'), (2, 'Trade'), (3, 'Syndicate'), (4, 'Association'), (5, 'Other')])),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=31370, null=True, blank=True)),
                ('address_fr', models.CharField(max_length=255, verbose_name='Location')),
                ('address_nl', models.CharField(max_length=255, null=True, verbose_name='Location', blank=True)),
                ('address_number', models.CharField(max_length=255, verbose_name='Address Number')),
                ('address_number_as_int', models.IntegerField(max_length=255)),
                ('address_regional', models.BooleanField(default=False)),
                ('postalcode', models.CharField(max_length=4, verbose_name='Postal Code')),
                ('description', models.TextField(null=True, blank=True)),
                ('fixed_at', models.DateTimeField(null=True, blank=True)),
                ('accepted_at', models.DateTimeField(null=True, blank=True)),
                ('date_planned', models.DateTimeField(null=True, blank=True)),
                ('pending', models.BooleanField(default=False)),
                ('hash_code', models.IntegerField(null=True, blank=True)),
                ('private', models.BooleanField(default=False)),
                ('gravity', models.IntegerField(default=0, choices=[(0, b'-'), (1, 'Moderate'), (2, 'Serious'), (3, 'Grave'), (4, 'Major')])),
                ('probability', models.IntegerField(default=0, choices=[(0, b'-'), (1, 'Unlikely'), (2, 'Rare'), (3, 'Possible'), (4, 'Occasionnel')])),
                ('photo', models.TextField(max_length=100, blank=True)),
                ('thumbnail', models.TextField(null=True, blank=True)),
                ('thumbnail_pro', models.TextField(null=True, blank=True)),
                ('close_date', models.DateTimeField(null=True, blank=True)),
                ('terms_of_use_validated', models.BooleanField(default=False)),
                ('false_address', models.TextField(null=True, blank=True)),
                ('source', models.TextField(default=b'web')),
                ('third_party_responsibility', models.BooleanField(default=False)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical report',
            },
        ),
        migrations.CreateModel(
            name='ListItem',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('label_fr', models.CharField(max_length=100, verbose_name='Label')),
                ('label_nl', models.CharField(max_length=100, null=True, verbose_name='Label', blank=True)),
                ('model_class', models.CharField(max_length=100, verbose_name='Related model class name')),
                ('model_field', models.CharField(max_length=100, verbose_name='Related model field')),
                ('code', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='MailNotificationTemplate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(help_text=b'Technical name', max_length=50)),
                ('content_fr', models.TextField(verbose_name=b'Content', blank=True)),
                ('content_nl', models.TextField(null=True, verbose_name=b'Content', blank=True)),
                ('title_fr', models.CharField(max_length=100, verbose_name=b'Subject', blank=True)),
                ('title_nl', models.CharField(max_length=100, null=True, verbose_name=b'Subject', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationEntity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('name_fr', models.CharField(max_length=100, verbose_name='Name')),
                ('name_nl', models.CharField(max_length=100, null=True, verbose_name='Name', blank=True)),
                ('slug_fr', models.SlugField(max_length=100, verbose_name='Slug')),
                ('slug_nl', models.SlugField(max_length=100, null=True, verbose_name='Slug', blank=True)),
                ('phone', models.CharField(max_length=32)),
                ('email', models.EmailField(max_length=254, null=True, blank=True)),
                ('active', models.BooleanField(default=False)),
                ('type', models.CharField(default=b'', max_length=1, choices=[(b'R', 'Region'), (b'C', 'Commune'), (b'S', 'Subcontractor'), (b'A', 'Applicant'), (b'D', 'Department'), (b'N', 'Neighbour house')])),
                ('feature_id', models.CharField(max_length=25, null=True, blank=True)),
                ('created_by', models.ForeignKey(related_name='organisationentity_created', editable=False, to='fixmystreet.FMSUser', null=True)),
                ('dependency', models.ForeignKey(related_name='associates', blank=True, to='fixmystreet.OrganisationEntity', null=True)),
            ],
            options={
                'ordering': ['name_fr'],
            },
        ),
        migrations.CreateModel(
            name='OrganisationEntitySurface',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('urbis_id', models.IntegerField(null=True, blank=True)),
                ('version_id', models.IntegerField(null=True, blank=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(srid=31370)),
                ('owner', models.ForeignKey(to='fixmystreet.OrganisationEntity')),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title_fr', models.CharField(max_length=100, verbose_name=b'Title')),
                ('title_nl', models.CharField(max_length=100, null=True, verbose_name=b'Title', blank=True)),
                ('slug_fr', models.CharField(max_length=100, verbose_name=b'Slug')),
                ('slug_nl', models.CharField(max_length=100, null=True, verbose_name=b'Slug', blank=True)),
                ('content_fr', ckeditor.fields.RichTextField(verbose_name=b'Content')),
                ('content_nl', ckeditor.fields.RichTextField(null=True, verbose_name=b'Content', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('status', models.IntegerField(default=1, choices=[('Created', ((1, 'Created'), (9, 'Refused'), (11, 'Temp'))), ('In progress', ((2, 'In progress'), (4, 'Manager is assigned'), (5, 'Applicant is responsible'), (6, 'Contractor is assigned'), (7, 'Solved'))), ('Processed', ((3, 'Processed'), (8, 'Deleted')))])),
                ('quality', models.IntegerField(blank=True, null=True, choices=[(1, 'Resident'), (2, 'Trade'), (3, 'Syndicate'), (4, 'Association'), (5, 'Other')])),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=31370, null=True, blank=True)),
                ('address_fr', models.CharField(max_length=255, verbose_name='Location')),
                ('address_nl', models.CharField(max_length=255, null=True, verbose_name='Location', blank=True)),
                ('address_number', models.CharField(max_length=255, verbose_name='Address Number')),
                ('address_number_as_int', models.IntegerField(max_length=255)),
                ('address_regional', models.BooleanField(default=False)),
                ('postalcode', models.CharField(max_length=4, verbose_name='Postal Code')),
                ('description', models.TextField(null=True, blank=True)),
                ('fixed_at', models.DateTimeField(null=True, blank=True)),
                ('accepted_at', models.DateTimeField(null=True, blank=True)),
                ('date_planned', models.DateTimeField(null=True, blank=True)),
                ('pending', models.BooleanField(default=False)),
                ('hash_code', models.IntegerField(null=True, blank=True)),
                ('private', models.BooleanField(default=False)),
                ('gravity', models.IntegerField(default=0, choices=[(0, b'-'), (1, 'Moderate'), (2, 'Serious'), (3, 'Grave'), (4, 'Major')])),
                ('probability', models.IntegerField(default=0, choices=[(0, b'-'), (1, 'Unlikely'), (2, 'Rare'), (3, 'Possible'), (4, 'Occasionnel')])),
                ('photo', models.FileField(upload_to=b'photos', blank=True)),
                ('thumbnail', models.TextField(null=True, blank=True)),
                ('thumbnail_pro', models.TextField(null=True, blank=True)),
                ('close_date', models.DateTimeField(null=True, blank=True)),
                ('terms_of_use_validated', models.BooleanField(default=False)),
                ('false_address', models.TextField(null=True, blank=True)),
                ('source', models.TextField(default=b'web')),
                ('third_party_responsibility', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ReportAttachment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('type', models.IntegerField(default=1, choices=[(1, 'Documentation'), (2, 'Closing message'), (3, 'Refusing message'), (4, 'Mark as done message'), (5, 'Reopen request message')])),
                ('logical_deleted', models.BooleanField(default=False)),
                ('security_level', models.IntegerField(default=2, choices=[(1, 'Public'), (2, 'Private'), (3, 'Confidential')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('name_fr', models.CharField(max_length=100, verbose_name='Name')),
                ('name_nl', models.CharField(max_length=100, null=True, verbose_name='Name', blank=True)),
                ('slug_fr', models.SlugField(max_length=100, verbose_name='Slug')),
                ('slug_nl', models.SlugField(max_length=100, null=True, verbose_name='Slug', blank=True)),
                ('public', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='ReportCategoryHint',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('label_fr', models.TextField(verbose_name='Label')),
                ('label_nl', models.TextField(null=True, verbose_name='Label', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReportEventLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('event_type', models.IntegerField(choices=[(1, 'Refused'), (2, 'Closed'), (3, 'Marked as Done'), (4, 'Manager assigned'), (6, 'Valid'), (7, 'Organisation assigned'), (9, 'Contractor assigned'), (10, 'Contractor changed'), (11, 'Applicant assigned'), (12, 'Applicant changed'), (14, 'Created'), (15, 'Updated'), (16, 'Update published'), (17, 'Planned'), (18, 'Merged'), (19, 'Reopen'), (20, 'Reopen request'), (21, 'Became private'), (22, 'Became public')])),
                ('event_at', models.DateTimeField(auto_now_add=True)),
                ('status_old', models.IntegerField(null=True, choices=[('Created', ((1, 'Created'), (9, 'Refused'), (11, 'Temp'))), ('In progress', ((2, 'In progress'), (4, 'Manager is assigned'), (5, 'Applicant is responsible'), (6, 'Contractor is assigned'), (7, 'Solved'))), ('Processed', ((3, 'Processed'), (8, 'Deleted')))])),
                ('status_new', models.IntegerField(null=True, choices=[('Created', ((1, 'Created'), (9, 'Refused'), (11, 'Temp'))), ('In progress', ((2, 'In progress'), (4, 'Manager is assigned'), (5, 'Applicant is responsible'), (6, 'Contractor is assigned'), (7, 'Solved'))), ('Processed', ((3, 'Processed'), (8, 'Deleted')))])),
                ('related_old_id', models.PositiveIntegerField(null=True)),
                ('related_new_id', models.PositiveIntegerField(null=True)),
                ('value_old', models.CharField(max_length=255, null=True)),
                ('merged_with_id', models.PositiveIntegerField(null=True)),
                ('organisation', models.ForeignKey(related_name='activities', to='fixmystreet.OrganisationEntity')),
                ('related_content_type', models.ForeignKey(to='contenttypes.ContentType', null=True)),
                ('report', models.ForeignKey(related_name='activities', to='fixmystreet.Report')),
                ('user', models.ForeignKey(related_name='activities', to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ['event_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportMainCategoryClass',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('name_fr', models.CharField(max_length=100, verbose_name='Name')),
                ('name_nl', models.CharField(max_length=100, null=True, verbose_name='Name', blank=True)),
                ('slug_fr', models.SlugField(max_length=100, verbose_name='Slug')),
                ('slug_nl', models.SlugField(max_length=100, null=True, verbose_name='Slug', blank=True)),
                ('created_by', models.ForeignKey(related_name='reportmaincategoryclass_created', editable=False, to='fixmystreet.FMSUser', null=True)),
                ('hint', models.ForeignKey(to='fixmystreet.ReportCategoryHint', null=True)),
                ('modified_by', models.ForeignKey(related_name='reportmaincategoryclass_modified', editable=False, to='fixmystreet.FMSUser', null=True)),
            ],
            options={
                'verbose_name': 'category group',
                'verbose_name_plural': 'category groups',
            },
        ),
        migrations.CreateModel(
            name='ReportNotification',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('recipient_mail', models.CharField(max_length=200, null=True)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField()),
                ('error_msg', models.TextField()),
                ('content_template', models.CharField(max_length=40)),
                ('reply_to', models.CharField(max_length=200, null=True)),
                ('related_object_id', models.PositiveIntegerField()),
                ('recipient', models.ForeignKey(related_name='notifications', blank=True, to='fixmystreet.FMSUser', null=True)),
                ('related_content_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='ReportSecondaryCategoryClass',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('name_fr', models.CharField(max_length=100, verbose_name='Name')),
                ('name_nl', models.CharField(max_length=100, null=True, verbose_name='Name', blank=True)),
                ('slug_fr', models.SlugField(max_length=100, verbose_name='Slug')),
                ('slug_nl', models.SlugField(max_length=100, null=True, verbose_name='Slug', blank=True)),
                ('created_by', models.ForeignKey(related_name='reportsecondarycategoryclass_created', editable=False, to='fixmystreet.FMSUser', null=True)),
                ('modified_by', models.ForeignKey(related_name='reportsecondarycategoryclass_modified', editable=False, to='fixmystreet.FMSUser', null=True)),
            ],
            options={
                'verbose_name': 'category group',
                'verbose_name_plural': 'category groups',
            },
        ),
        migrations.CreateModel(
            name='ReportSubscription',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('report', models.ForeignKey(related_name='subscriptions', to='fixmystreet.Report')),
                ('subscriber', models.ForeignKey(related_name='subscriptions', to='fixmystreet.FMSUser')),
            ],
        ),
        migrations.CreateModel(
            name='StreetSurface',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('urbis_id', models.IntegerField(null=True, blank=True)),
                ('pw_id', models.IntegerField(null=True, blank=True)),
                ('ssft', models.CharField(blank=True, max_length=1, choices=[(b'A', b'access ramp'), (b'G', b'gallery'), (b'I', b'crossroads'), (b'L', b'local road'), (b'P', b'place'), (b'S', b'section')])),
                ('sslv', models.CharField(blank=True, max_length=1, choices=[(b'+', b'up'), (b'=', b'reference'), (b'-', b'down'), (b'0', b'not defined')])),
                ('version_id', models.IntegerField(null=True, blank=True)),
                ('administrator', models.CharField(blank=True, max_length=3, null=True, choices=[(b'REG', b'Region')])),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(srid=31370)),
            ],
        ),
        migrations.CreateModel(
            name='UserOrganisationMembership',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(default=django.utils.timezone.now, verbose_name='created', editable=False, blank=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(default=django.utils.timezone.now, verbose_name='modified', editable=False, blank=True)),
                ('contact_user', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(related_name='userorganisationmembership_created', editable=False, to='fixmystreet.FMSUser', null=True)),
                ('modified_by', models.ForeignKey(related_name='userorganisationmembership_modified', editable=False, to='fixmystreet.FMSUser', null=True)),
                ('organisation', models.ForeignKey(related_name='memberships', blank=True, to='fixmystreet.OrganisationEntity', null=True)),
                ('user', models.ForeignKey(related_name='memberships', blank=True, to='fixmystreet.FMSUser', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ZipCode',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('code', models.CharField(max_length=4)),
                ('name_fr', models.CharField(max_length=100)),
                ('name_nl', models.CharField(max_length=100, null=True, blank=True)),
                ('hide', models.BooleanField()),
                ('commune', models.ForeignKey(related_name='zipcode', to='fixmystreet.OrganisationEntity')),
            ],
        ),
        migrations.CreateModel(
            name='ReportComment',
            fields=[
                ('reportattachment_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='fixmystreet.ReportAttachment')),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('fixmystreet.reportattachment',),
        ),
        migrations.CreateModel(
            name='ReportFile',
            fields=[
                ('reportattachment_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='fixmystreet.ReportAttachment')),
                ('file', models.FileField(upload_to=apps.fixmystreet.models.move_to, blank=True)),
                ('image', StdImageField(upload_to=apps.fixmystreet.models.move_to, blank=True)),
                ('file_type', models.IntegerField(choices=[(1, b'pdf'), (2, b'word'), (3, b'excel'), (4, b'image')])),
                ('title', models.TextField(max_length=250, null=True, blank=True)),
                ('file_creation_date', models.DateTimeField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('fixmystreet.reportattachment',),
        ),
        migrations.AddField(
            model_name='reportcategory',
            name='category_class',
            field=models.ForeignKey(related_name='categories', verbose_name='Category group', to='fixmystreet.ReportMainCategoryClass', help_text=b'The category group container'),
        ),
        migrations.AddField(
            model_name='reportcategory',
            name='created_by',
            field=models.ForeignKey(related_name='reportcategory_created', editable=False, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='reportcategory',
            name='modified_by',
            field=models.ForeignKey(related_name='reportcategory_modified', editable=False, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='reportcategory',
            name='organisation_communal',
            field=models.ForeignKey(related_name='categories_communal', blank=True, to='fixmystreet.OrganisationEntity', help_text=b'Group for auto dispatching', null=True),
        ),
        migrations.AddField(
            model_name='reportcategory',
            name='organisation_regional',
            field=models.ForeignKey(related_name='categories_regional', blank=True, to='fixmystreet.OrganisationEntity', help_text=b'Group for auto dispatching', null=True),
        ),
        migrations.AddField(
            model_name='reportcategory',
            name='secondary_category_class',
            field=models.ForeignKey(related_name='categories', verbose_name='Category group', to='fixmystreet.ReportSecondaryCategoryClass', help_text=b'The category group container'),
        ),
        migrations.AddField(
            model_name='reportattachment',
            name='created_by',
            field=models.ForeignKey(related_name='reportattachment_created', editable=False, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='reportattachment',
            name='modified_by',
            field=models.ForeignKey(related_name='reportattachment_modified', editable=False, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='reportattachment',
            name='report',
            field=models.ForeignKey(related_name='attachments', to='fixmystreet.Report'),
        ),
        migrations.AddField(
            model_name='report',
            name='category',
            field=models.ForeignKey(verbose_name='Category', blank=True, to='fixmystreet.ReportMainCategoryClass', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='citizen',
            field=models.ForeignKey(related_name='citizen_reports', blank=True, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='contractor',
            field=models.ForeignKey(related_name='assigned_reports', blank=True, to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='created_by',
            field=models.ForeignKey(related_name='report_created', editable=False, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='merged_with',
            field=models.ForeignKey(related_name='merged_reports', blank=True, to='fixmystreet.Report', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='modified_by',
            field=models.ForeignKey(related_name='report_modified', editable=False, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='previous_managers',
            field=models.ManyToManyField(related_name='previous_reports', null=True, to='fixmystreet.FMSUser', blank=True),
        ),
        migrations.AddField(
            model_name='report',
            name='responsible_department',
            field=models.ForeignKey(related_name='reports_in_department', to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='responsible_entity',
            field=models.ForeignKey(related_name='reports_in_charge', blank=True, to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='secondary_category',
            field=models.ForeignKey(verbose_name='Category', blank=True, to='fixmystreet.ReportCategory', null=True),
        ),
        migrations.AddField(
            model_name='organisationentity',
            name='dispatch_categories',
            field=models.ManyToManyField(related_name='assigned_to_department', to='fixmystreet.ReportCategory', blank=True),
        ),
        migrations.AddField(
            model_name='organisationentity',
            name='fmsproxy',
            field=models.ForeignKey(blank=True, to='fmsproxy.FMSProxy', null=True),
        ),
        migrations.AddField(
            model_name='organisationentity',
            name='modified_by',
            field=models.ForeignKey(related_name='organisationentity_modified', editable=False, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='category',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.ReportMainCategoryClass', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='citizen',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='contractor',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='created_by',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='history_user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='merged_with',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.Report', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='modified_by',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='responsible_department',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='responsible_entity',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.AddField(
            model_name='historicalreport',
            name='secondary_category',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.ReportCategory', null=True),
        ),
        migrations.AddField(
            model_name='historicalorganisationentity',
            name='dependency',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.AddField(
            model_name='historicalorganisationentity',
            name='fmsproxy',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fmsproxy.FMSProxy', null=True),
        ),
        migrations.AddField(
            model_name='historicalorganisationentity',
            name='history_user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalorganisationentity',
            name='modified_by',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.FMSUser', null=True),
        ),
        migrations.AddField(
            model_name='historicalfmsuser',
            name='organisation',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.AddField(
            model_name='historicalfmsuser',
            name='user_ptr',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='groupmailconfig',
            name='group',
            field=models.ForeignKey(to='fixmystreet.OrganisationEntity', unique=True),
        ),
        migrations.AddField(
            model_name='fmsuser',
            name='organisation',
            field=models.ForeignKey(related_name='team', verbose_name='Entity', blank=True, to='fixmystreet.OrganisationEntity', null=True),
        ),
        migrations.CreateModel(
            name='ReportReopenReason',
            fields=[
                ('reportcomment_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='fixmystreet.ReportComment')),
                ('reason', models.IntegerField(choices=[(1, 'Not repaired'), (2, 'Badly repaired'), (3, 'Other')])),
            ],
            options={
                'abstract': False,
            },
            bases=('fixmystreet.reportcomment',),
        ),
        migrations.AlterUniqueTogether(
            name='userorganisationmembership',
            unique_together=set([('user', 'organisation')]),
        ),
        migrations.AlterUniqueTogether(
            name='reportsubscription',
            unique_together=set([('report', 'subscriber')]),
        ),
    ]
